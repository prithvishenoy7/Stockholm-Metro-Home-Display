# ============================================================================
# Environment Variables Configuration
# ============================================================================
# SECURITY CONCEPT: Never commit actual .env file to git!
# This .env.example serves as a template
# 
# SETUP INSTRUCTIONS:
# 1. Copy this file: cp .env.example .env
# 2. Fill in your actual values in .env
# 3. Add .env to .gitignore (so it's never committed)

# ============================================================================
# Trafiklab API Configuration
# ============================================================================
# Get your API key from: https://www.trafiklab.se/api
# API: SL Realtidsinformation (v1)
TRAFIKLAB_API_KEY=your_trafiklab_api_key_here

# Default station ID - NEW FORMAT (6 digits)
# Find station IDs at: https://www.trafiklab.se/api/trafiklab-apis/sl/stops-and-lines-2/
# Common Stockholm stations:
#   740000701 - Helenelund
#   740000001 - T-Centralen (Stockholm Central)
#   740000002 - Slussen
#   740000003 - Gamla Stan
DEFAULT_SITE_ID=740000701

# ============================================================================
# Application Configuration
# ============================================================================
# Port the Flask API listens on (inside container)
FLASK_PORT=5000

# Flask environment (development or production)
# SECURITY: Set to 'production' when deploying!
FLASK_ENV=development

# Dynamic Cache TTL - Different cache times based on time of day
# OPTIMIZATION: Longer cache during night (fewer trains), shorter during day (fresher data)
#
# Night period (00:00-06:59): Trains less frequent, can cache longer
# Recommended: 600 seconds (10 minutes)
CACHE_TTL_NIGHT=600
#
# Day period (07:00-23:59): Trains frequent, want fresh data
# Recommended: 120 seconds (2 minutes)
CACHE_TTL_DAY=120
#
# API Call Estimation with these settings:
# - Night (7 hours): ~42 calls (1 per 10 min)
# - Day (17 hours): ~510 calls (1 per 2 min)
# - Total per day: ~552 calls
# - Total per month: ~16,560 calls (within 10k Bronze limit if not continuous)

# ============================================================================
# Logging Configuration
# ============================================================================
# Set log verbosity level
# Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# ============================================================================
# SECURITY NOTES:
# ============================================================================
# ✅ DO: Keep .env file local only
# ✅ DO: Use different API keys for dev/staging/production
# ✅ DO: Rotate API keys periodically
# ✅ DO: Use secret management tools in production (AWS Secrets Manager, etc.)
# ❌ DON'T: Commit .env to version control
# ❌ DON'T: Share API keys in public channels
# ❌ DON'T: Use production credentials in development

# ============================================================================
# DOCKER CONCEPT: Environment Variables
# ============================================================================
# These variables are injected into the container at runtime
# The application reads them using os.environ.get('VAR_NAME')
# Benefits:
# - Same image works in dev, staging, production (different configs)
# - Keeps secrets out of code
# - Easy to change without rebuilding image