# ============================================================================
# Environment Variables Configuration
# ============================================================================
# SECURITY CONCEPT: Never commit actual .env file to git!
# This .env.example serves as a template
# 
# SETUP INSTRUCTIONS:
# 1. Copy this file: cp .env.example .env
# 2. Fill in your actual values in .env
# 3. Add .env to .gitignore (so it's never committed)

# ============================================================================
# Trafiklab API Configuration
# ============================================================================
# Get your API key from: https://www.trafiklab.se/api
# API: SL Realtidsinformation (v1)
TRAFIKLAB_API_KEY=your_trafiklab_api_key_here

# Default station ID - NEW FORMAT (6 digits)
# Find station IDs at: https://www.trafiklab.se/api/trafiklab-apis/sl/stops-and-lines-2/
# Common Stockholm stations:
#   740000701 - Helenelund
#   740000001 - T-Centralen (Stockholm Central)
#   740000002 - Slussen
#   740000003 - Gamla Stan
DEFAULT_SITE_ID=740000701

# ============================================================================
# Application Configuration
# ============================================================================
# Port the Flask API listens on (inside container)
FLASK_PORT=5000

# Flask environment (development or production)
# SECURITY: Set to 'production' when deploying!
FLASK_ENV=development

# Cache TTL in seconds (how long to cache train data)
# CONCEPT: Higher value = fewer API calls but less fresh data
# CONCEPT: Lower value = more API calls but fresher data
# Trafiklab Bronze tier: 10,000 calls/month, 30 calls/minute
# With 60s TTL: Maximum 1 call/minute = ~43,200 calls/month (well within limit)
# With 30s TTL: Maximum 2 calls/minute = ~86,400 calls/month (still ok)
CACHE_TTL=60

# ============================================================================
# SECURITY NOTES:
# ============================================================================
# ✅ DO: Keep .env file local only
# ✅ DO: Use different API keys for dev/staging/production
# ✅ DO: Rotate API keys periodically
# ✅ DO: Use secret management tools in production (AWS Secrets Manager, etc.)
# ❌ DON'T: Commit .env to version control
# ❌ DON'T: Share API keys in public channels
# ❌ DON'T: Use production credentials in development

# ============================================================================
# DOCKER CONCEPT: Environment Variables
# ============================================================================
# These variables are injected into the container at runtime
# The application reads them using os.environ.get('VAR_NAME')
# Benefits:
# - Same image works in dev, staging, production (different configs)
# - Keeps secrets out of code
# - Easy to change without rebuilding image